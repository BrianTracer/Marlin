************************************************************************ 
*
* Marlin is a C++ software framework for ILC software.
* It uses the LCIO data model and can be used for
* all tasks that involve processing of LCIO files, e.g. reconstruction
* and analysis.
*
*
* F. Gaede, DESY
* J. Engels, DESY
* $Id: README,v 1.16 2007-07-13 11:09:04 gaede Exp $
************************************************************************


The idea is that every computing task is implemented as a processor (module) that analyzes 
data in an LCEvent and creates additional output collections that are added to the event.
The framework allows to define the processors (and their order) that are executed at runtime in a 
simple steering file.
Via the steering file you can also define named parameters (string, float, int - single and arrays)
for every processor as well as for the global scope.
By using the framework users don't have to write any code that deals with the IO they simply 
write processors with defined callbacks, i.e. init(), processRunHeader(), processEvent(), end().


  +++++++++++++ (NEW since v00-09-08) ++++++++++++++++

    CMake is now the new default build tool for Marlin - it simplifies the build process
    and creates shared libraries by default. 
    This makes it easier to include external packages through a plugin mechanism,
    in particular only the package that has changed needs to be recompiled and no 
    relinking is necessary.
    
  ++++++++++++++++++++++++++++++++++++++++++++++++++++


    Instructions for building Marlin with CMake:
    -------------------------------------------

    1st: make sure cmake is in your PATH environment! (for SL3 and SL4
    users check /afs/desy.de/group/it/ilcsoft/CMake )

    2nd: edit the file BuildSetup.cmake and change it according to your system setup.

    Afterwards type:

    $ mkdir build
    $ cd build
    $ cmake -C ../BuildSetup.cmake ..
    $ make install


    Loading processors dynamically ( at run time ):
    ----------------------------------------------
    
    Take mymarlin as an example:
    
    1st: edit the file <Path_to_Marlin>/examples/mymarlin/BuildSetup.cmake
         and change it according to your system setup

    2nd: build the processor library by typing:
    
    $ cd <Path_to_Marlin>/examples/mymarlin
    $ mkdir build
    $ cmake -C ../BuildSetup.cmake ..
    $ make install

    Afterwards you have to tell Marlin to load the processor
    by setting the environment variable MARLIN_DLL:
    
    $ export MARLIN_DLL="$PWD/lib/libmymarlin.so"
    $ ../../bin/Marlin -x

    If you have 2 or more libs you should separate them with ';' or
    with whitespaces, e.g.:
    $ export MARLIN_DLL="/path1/lib1.so;/path2/lib2.so"
    $ export MARLIN_DLL="/path1/lib1.so /path2/lib2.so"
    

    Linking Marlin with shared processor libraries ( at compile time ):
    ------------------------------------------------------------------
    
    However if you don't want to set MARLIN_DLL for loading your libraries, you can
    link the Marlin library with the processors you need. Define this settings inside
    BuildSetup.cmake or directly on the command line when building Marlin:

    $ cmake -C ../BuildSetup.cmake
            -DLINK_WITH="mymarlin PandoraPFA"
            -Dmymarlin_HOME="path_to_mymarlin
            -DPandoraPFA_HOME="path_to_pandora" ..


    Linking Marlin with static processor libraries ( not recommended!! ):
    --------------------------------------------------------------------
    
    --- This only works under Linux! ---
    
    If for some reason you have a processor that you can't build with CMake and you
    only have it as a static library (libMyProcessor.a). You can still link Marlin
    against it by adding the option:

    -DLINK_STATIC_WHOLE_LIBS="path_to_library/libMyprocessor.a"

    so the cmake command to build Marlin would look like:
    $ cmake -C ../BuildSetup.cmake
            -DLINK_STATIC_WHOLE_LIBS="path_to_library/libMyprocessor.a" ..

    this way your static library gets fully linked into the Marlin binary.

    If you have 2 or more libs you should separate them with a ';' or with a whitespace, e.g.:
    -DLINK_STATIC_WHOLE_LIBS="/path1/lib1.a;/path2/lib2.a"


    Adapt your Processor for CMake:
    ------------------------------

    For adapting your processor to be built with CMake just copy the following files
    from $Marlin/examples/mymarlin directory to your package:

    CMakeLists.txt
    cmake_uninstall.cmake.in
    mymarlinConfig.cmake.in
    BuildSetup.cmake

    and adapt the following files:

    CMakeLists.txt -> change 2 lines:
        project name and add missing project dependencies (default are Marlin;LCIO)

    BuildSetup.cmake -> change this according to your system setup

    mymarlinConfig.cmake -> rename to <MyProcessor>Config.cmake


    For more information on CMake for the ILCSoftware, check:
    http://ilcsoft.desy.de/portal/general_documentation/index_eng.html (will be available soon!)

    CMake's official website:
    http://www.cmake.org


  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



OLD Build Instructions: -> Deprecated, please use cmake!

To build the marlin library without any existing packages:

   #-- modify env.sh according to your system  and requirements
   . env.sh
   gmake -C ./src

To build the API documentation with doxygen
   gmake -C ./src doc

  +++ (since v00-09) +++
You can also build Marlin together with existing packages that contain Marlin processors. Simply 
create a subdirectory packages in your Marlin directory and
copy the corresponding packages to the ./packages subdirectory (or use a symbolic link to reference
an existing package directory)  and use the top level makefile:
   . env.sh
   gmake 
   
This works if the packages in the ./packages subdirectories fulfill the following requiremets:

   a) they have the following structure
         ./MyPackage/include
         ./src/
         ./src/GNUmakefile
         ./lib
   b) a call to gmake lib creates:
         ./MyPackage/lib/libMyPackage.a

   c) all package dependencies have been added to the file usrlib.gmk which is included by the
      top level makefile - use the file usrlib_example.gmk as an example
 

  +++++++++++++++++++++++++++


To develop your own processors and create applications:

  - Inherit from Processor and overwrite the needed methods (init(), processRunHeader(), 
  processEvent(), end()).

  - provide default constructor that initializes the Processor with a type name (typically the class name)
    and one globale instance of your class, e.g. 

     TestProcessor aTestProcessor ;
     TestProcessor::TestProcessor() : Processor("TestProcessor") {}

     this makes your processor known to Marlin.


  - Create the steering file - either old ascii format or new xml format:  

    old ascii format:
    -----------------
    * start from test.steer and add sections for every needed processor (use ./bin/MyMarlinApp -l 
      to get example sections for all known processors)
    * Add your processor(s) to the variable ActiveProcessors with a unique name.
    * Add a section with the processor parameters to the steering file (identified by the unique name)
    * Don't forget the parameter ProcessorType (typically the class name)
 
    -> run: './bin/MyMarlinApp test.steer'


  +++ (NEW since v00-09) +++

    new XML format:
    ---------------
    * create an example steering file with ./bin/MyMarlinApp -x > test.xml
    * edit the <execute/> section by adding processors as needed (use the names 
      defined in the corresponding <processor/> tag.  

    -> run: './bin/MyMarlinApp test.xml'

    * XML files provide a mechanism to group processors and to define conditions for the 
      execution of the processors (see API doc of class XMLParser for details)     

  ++++++++++++++++++++++++++


 -> examples/mymarlin can serve as a template for a new project using marlin !

    simply copy the whole directory 

       cp -r $MARLIN/examples/mymarlin MyMarlinPackage   (please choose another name !)
 
    renaming the files source files, e.g.

      mv include/MyProcessor.h include/ChooseAReasonableNameForThisClass.h
      mv src/MyProcessor.cc src/ChooseAReasonableNameForThisClass.cc

    edit the makefile src/GNUmakefile:

       PROGNAME = MyMarlinPackage (please choose another name but the same as above for the package ! )

    add external libraries as needed to the user section:

    ifndef USERINCLUDES
      USERINCLUDES = -I ../../MarlinCommon/include  
    endif

    ifndef USERLIBS
      USERLIBS =  -L ../../MarlinCommon/lib -lMarlinCommon
    endif
   
   ------------------------------------------------------------------------------------------------------
     Note: the structure of this makefile has been changed in  v00-09 to make it easier to integrate 
     the various marlin based packages. The ifndef/endif construct allows to build this package locally
     as well as from the top level makefile !
     So please consider to upgrade your existing marlin packages' makefiles.
   ------------------------------------------------------------------------------------------------------


  set the proper environment - edit env.sh and then
     . env.sh 
  build the example 
     gmake -C ./src
  
  Or copy the (link) directory and build together with Marlin and other packages  using the top level 
  makefile as described above.
     

If you are updating from an older version please also read the ./doc/release.notes and the latest version
of the API doc !

