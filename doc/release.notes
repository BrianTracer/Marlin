
  Marlin release notes
 ======================

  improved makefiles for Marlin that create marlin_includes.sh and marlin_libs.sh
  in order to build with the same libraries as have been used for core Marlin

  new (optional) XML steering files that provide new features:

     - conditions: Processor::processEvent will be called only if a condition
       expressed in terms of ProcessorNames as specified in the steering file is true

     - groups: processors can be grouped together so that they can share common variables
       and can be referred to in the <execute/> by the group name

     - TinyXml parser ( http://sourceforge.net/projects/tinyxml ) 
       that can be used to read arbitrary xml files

  LCIOOutputProcessor allows to drop collections - needs LCIO v01-05

  new method Processor::isFirstEvent() - use instead of static bool isFirstEvent

  added SimpleFastMCProcessor - simple smearing Monte Carlo - see fastMC.steer for an example

  new DataSourceProcessor class that allows reading of non-LCIO data streams
 
  StdHepReader processor that creates an LCIO data stream from an stdhep file
  (patch by J.Samson for limiting the number of events (MaxRecordNumber))

  bug fixes:
   empty lines containing whitspaces or tabs are ignored now (no seg.fault)

 v00-08

  improved API doc
  
  bug fixes in ConditionsProcessor

  improved example/mymarlin/src/GNUmakefile

 v00-07
    
  added ConditionsProcessor for LCCD
   
  added optional parameters to Processor
 
  read chain of LCIO input files in Marlin.cc
   
  fixed problems with registered vector parameters

 v00-06 

  added examples directory that can serve as a template for user projects

  added Processr::printParameters()
 
  fixed Problem with default values of parameters 

  renamed Processr::dump() to Processr::printDescription()

 v00-05

  added Processr::check()  to be used for checkplots in reco processors
 
 v00-04    (changes wrt. to v00-03):
  
   * generates warning instead of error message if less than MaxRecordNumber records read

   * improved handling/documentation of steering parameters / modules

     - Marlin -l : lists all kown modules and their steering parameters
		   with description and default values
                   in a format that can be copied to a  steering file 

       -> use Processor::registerProcessorParameter(name, description, parameter, defaultVal ) ;
          to declare your parameters

     - leading whitespace allowed in steering file to improve readability


   * new AIDAProcessor for producing AIDA/root histograms:

    - handles AIDA file for all modules 
    - modules simply create and fill their histograms
    - uses JAIDA/AIDAJNI AIDA-implementation 
    - not mandatory - could still use root but preferred  for 'official' processors/modules

