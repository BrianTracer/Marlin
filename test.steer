############################################
#
#  Example steering file for Marlin
#    
############################################

.begin Global  ---------------------------------------

# specify one ore more input files (in one ore more lines)

	LCIOInputFiles simjob.slcio  
	#LCIOInputFiles ../simjob.slcio ../simjob1.slcio

	# the active processors that are called in the given order

#	ActiveProcessors MyStdHepReader
	ActiveProcessors AIDAFile
	ActiveProcessors MyConditionsProcessor
	ActiveProcessors FranksTestProcessor
#	ActiveProcessors AnotherTestProcessor
	ActiveProcessors OutputFile

	# limit the number of processed records (run+evt):
	MaxRecordNumber 5001

	# don't call the check method of the processors if "true"
      #	SupressCheck true
.end   -----------------------------------------------


.begin MyConditionsProcessor
ProcessorType ConditionsProcessor
#---ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using
LCCD

#       Initialization of a conditions database handler
#        type:  [StringVec]
#        example:
#       DBCondHandler   conditionsName /lccd/myfolder HEAD


#       Initialization of a conditions db file handler
#        type:  [StringVec]
#        example:
#       DBFileHandler   conditionsName conditions.slcio collectionName


#       Initialization string for conditions database
#        type:  [string]
#        default: localhost:lccd_test:calvin:hobbes
        DBInit   localhost:lccd_test:calvin:hobbes


#       Initialization of a data file handler
#        type:  [StringVec]
#        example:
#       DataFileHandler   conditionsName


#       Initialization of a simple conditions file handler
#        type:  [StringVec]
#        example:
#       SimpleFileHandler   conditionsName conditions.slcio collectionName

.end -------------------------------------------------

# the default output processor
.begin OutputFile  

	# mandatory processor type (the name of the class)
		ProcessorType LCIOOutputProcessor

	# the outputfile
		LCIOOutputFile marlin.slcio

	# lcio write mode, new overwrites existing files 
	# append appends to existing files 
	# if nothing specified create new file only if it doesn't exist
		LCIOWriteMode WRITE_NEW

	#LCIOWriteMode WRITE_APPEND

.end -------------------------------------------------


.begin MyStdHepReader
ProcessorType StdHepReader
#---Reads StdHep files as input and creates LCIO events with MCParticle collections. 
#---Make sure to not specify any LCIOInputFiles in the steering in order to read StdHep files.

#       input file
#        type:  [string]
#        default: input.stdhep
        StdHepFileName   input.stdhep

.end -------------------------------------------------

# a few testprocessors - no functionality realy
.begin FranksTestProcessor 

	ProcessorType TestProcessor

	parameter0   1  
	parameter1   4.30325e-34
	parameter2   2.0
	parameter3   3.3 
.end -------------------------------------------------



.begin AnotherTestProcessor

	ProcessorType TestProcessor

	parameter0   12
	parameter1   24
	parameter2   36
	parameter3   blabla bla bla
.end -------------------------------------------------



.begin AIDAFile
	ProcessorType AIDAProcessor

	# type of outputfile - xml (default) or root (only with OpenScientist)
		FileType xml

	FileName DefaultPlots

	# compress >-1-true (default) <0-false
	Compress 1

.end -------------------------------------------------
